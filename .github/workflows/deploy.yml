name: Deploy to Azure Container Apps

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  CONTAINER_REGISTRY: fortequizcontainerregistry.azurecr.io
  RESOURCE_GROUP: forte-quiz-edvard
  FRONTEND_CONTAINER_APP_NAME: quiz-frontend
  BACKEND_CONTAINER_APP_NAME: quiz-backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        driver-opts: |
          image=moby/buildkit:latest
        use: true
    
    - name: Login to Azure Container Registry (OIDC)
      run: |
        az acr login --name fortequizcontainerregistry --resource-group forte-quiz-edvard
    
    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: |
          ${{ env.CONTAINER_REGISTRY }}/quiz-frontend:${{ github.sha }}
          ${{ env.CONTAINER_REGISTRY }}/quiz-frontend:latest
          ${{ env.CONTAINER_REGISTRY }}/quiz-frontend:${{ github.run_number }}
        cache-from: type=gha
        build-args: |
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
        platforms: linux/amd64
    
    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ env.CONTAINER_REGISTRY }}/quiz-backend:${{ github.sha }}
          ${{ env.CONTAINER_REGISTRY }}/quiz-backend:latest
          ${{ env.CONTAINER_REGISTRY }}/quiz-backend:${{ github.run_number }}
        cache-from: type=gha
        platforms: linux/amd64
    
    - name: Deploy Infrastructure
      env:
        # Reference the global environment variables
        CONTAINER_REGISTRY: ${{ env.CONTAINER_REGISTRY }}
        RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
        RUN_NUMBER: ${{ github.run_number }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_DEPLOYMENT_NAME: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}
        SQL_CONNECTION_STRING: ${{ secrets.SQL_CONNECTION_STRING }}
      run: |
        # Use the environment variables
        az deployment group create \
          --resource-group "${RESOURCE_GROUP}" \
          --template-file "infrastructure/frontend.bicep" \
          --parameters "infrastructure/parameters.json" \
          --parameters frontendImage="${CONTAINER_REGISTRY}/quiz-frontend:${RUN_NUMBER}" \
          --parameters backendImage="${CONTAINER_REGISTRY}/quiz-backend:${RUN_NUMBER}" \
          --parameters azureOpenAIEndpoint="${AZURE_OPENAI_ENDPOINT}" \
          --parameters azureOpenAIApiKey="${AZURE_OPENAI_API_KEY}" \
          --parameters azureOpenAIDeploymentName="${AZURE_OPENAI_DEPLOYMENT_NAME}" \
          --parameters sqlConnectionString="${SQL_CONNECTION_STRING}" \
          --name "deployment-${RUN_NUMBER}" \
          --output table
    
    - name: Update Container Apps
      run: |
        az containerapp update \
          --name "${{ env.FRONTEND_CONTAINER_APP_NAME }}" \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --image "${{ env.CONTAINER_REGISTRY }}/quiz-frontend:${{ github.run_number }}"
        
        az containerapp update \
          --name "${{ env.BACKEND_CONTAINER_APP_NAME }}" \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --image "${{ env.CONTAINER_REGISTRY }}/quiz-backend:${{ github.run_number }}"
    
    - name: Get URLs
      id: get-urls
      run: |
        FRONTEND_URL=$(az containerapp show \
          --name "${{ env.FRONTEND_CONTAINER_APP_NAME }}" \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        echo "frontend-url=https://$FRONTEND_URL" >> $GITHUB_OUTPUT
        
        BACKEND_URL=$(az containerapp show \
          --name "${{ env.BACKEND_CONTAINER_APP_NAME }}" \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        echo "backend-url=https://$BACKEND_URL" >> $GITHUB_OUTPUT
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const frontendUrl = '${{ steps.get-urls.outputs.frontend-url }}';
          const backendUrl = '${{ steps.get-urls.outputs.backend-url }}';
          const comment = `## ðŸš€ Application Deployed Successfully!
          
          **Frontend URL:** ${frontendUrl}
          **Backend URL:** ${backendUrl}
          
          **Deployment Details:**
          - Frontend Image: \`${{ env.CONTAINER_REGISTRY }}/quiz-frontend:${{ github.sha }}\`
          - Backend Image: \`${{ env.CONTAINER_REGISTRY }}/quiz-backend:${{ github.sha }}\`
          - Environment: Production
          - Resource Group: ${{ env.RESOURCE_GROUP }}
          
          **Next Steps:**
          1. Test the deployed application
          2. Verify all functionality works as expected`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
