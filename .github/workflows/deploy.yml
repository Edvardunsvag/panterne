name: Deploy to Azure Container Apps

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  CONTAINER_REGISTRY: fortequizcontainerregistry.azurecr.io
  RESOURCE_GROUP: forte-quiz-edvard
  FRONTEND_CONTAINER_APP_NAME: quiz-frontend
  BACKEND_CONTAINER_APP_NAME: quiz-backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        driver-opts: |
          image=moby/buildkit:latest
        use: true
    
    - name: Login to Azure Container Registry (OIDC)
      run: |
        az acr login --name fortequizcontainerregistry --resource-group forte-quiz-edvard
    
    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: |
          ${{ env.CONTAINER_REGISTRY }}/quiz-frontend:${{ github.sha }}
          ${{ env.CONTAINER_REGISTRY }}/quiz-frontend:latest
          ${{ env.CONTAINER_REGISTRY }}/quiz-frontend:${{ github.run_number }}
        build-args: |
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
        platforms: linux/amd64
    
    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ env.CONTAINER_REGISTRY }}/quiz-backend:${{ github.sha }}
          ${{ env.CONTAINER_REGISTRY }}/quiz-backend:latest
          ${{ env.CONTAINER_REGISTRY }}/quiz-backend:${{ github.run_number }}
        platforms: linux/amd64
    
    - name: Test Parameter Validation
      run: |
        echo "Checking files..."
        ls -la infrastructure/
        echo "Current directory:"
        pwd
        echo "Container registry:"
        docker images | head -5

    - name: Deploy Infrastructure (Debug Mode)
      env:
        RESOURCE_GROUP: forte-quiz-edvard
        RUN_NUMBER: ${{ github.run_number }}
        SQL_CONNECTION_STRING: ${{ secrets.SQL_CONNECTION_STRING }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
      run: |
        echo "=== DEBUGGING FULL DEPLOYMENT PROCESS ==="
        
        # Step 1: Environment Check
        echo "🔍 Environment Debug:"
        echo "RESOURCE_GROUP: ${RESOURCE_GROUP}"
        echo "RUN_NUMBER: ${RUN_NUMBER}"
        echo "AZURE_SUBSCRIPTION_ID: $(az account show --query id --output tsv)"
        echo "AZURE_TENANT_ID: $(az account show --query tenantId --output tsv)"
        echo "CURRENT_USER: $(az account show --query user.name --output tsv)"
        echo ""
        
        # Step 2: Azure CLI Version & Status
        echo "🔍 Azure CLI Debug:"
        echo "Azure CLI Version: $(az --version | head -1)"
        echo "Login Status:"
        az account show --output table
        echo ""
        
        # Step 3: File System Debug
        echo "🔍 File System Debug:"
        echo "Current directory: $(pwd)"
        echo "Contents:"
        ls -la
        echo "Infrastructure directory:"
        ls -la infrastructure/
        echo "Checking specific files:"
        echo "Bicep file exists: $(test -f infrastructure/frontend.bicep && echo 'YES' || echo 'NO')"
        echo "Parameters file exists: $(test -f infrastructure/parameters.json && echo 'YES' || echo 'NO')"
        echo ""
        
        # Step 4: Parameter File Debug
        echo "🔍 Parameters Debug:"
        echo "parameters.json content:"
        cat infrastructure/parameters.json
        echo ""
        echo "Environment variables:"
        echo "SQL_CONNECTION_STRING length: ${#SQL_CONNECTION_STRING}"
        echo "AZURE_OPENAI_API_KEY length: ${#AZURE_OPENAI_API_KEY}"
        echo "SQL_CONNECTION_STRING first 20 chars: ${SQL_CONNECTION_STRING:0:20}..."
        echo "AZURE_OPENAI_API_KEY first 20 chars: ${AZURE_OPENAI_API_KEY:0:20}..."
        echo ""
        
        # Step 5: Resource Group Debug  
        echo "🔍 Resource Group Debug:"
        echo "Resource group exists: $(az group exists --name ${RESOURCE_GROUP})"
        echo "Resource group location: $(az group show --name ${RESOURCE_GROUP} --query location --output tsv)"
        echo "Current resources in group:"
        az resource list --resource-group ${RESOURCE_GROUP} --query "[].{Name:name, Type:type}" --output table
        echo ""
        
        # Step 6: Bicep Compilation Test
        echo "🔍 Bicep Compilation Test:"
        echo "Compiling Bicep template..."
        az bicep build --file infrastructure/frontend.bicep --stdout > /dev/null
        echo "Bicep compilation: $([ $? -eq 0 ] && echo 'SUCCESS' || echo 'FAILED')"
        echo ""
        
        # Step 7: Template Validation
        echo "🔍 Template Validation:"
        echo "Running az deployment group validate..."
        az deployment group validate \
          --resource-group "${RESOURCE_GROUP}" \
          --template-file "infrastructure/frontend.bicep" \
          --parameters "infrastructure/parameters.json" \
          --verbosity detailed \
          --output json | jq '.' || echo "Validation failed or returned non-JSON output"
        echo ""
        
      
        
        # Step 9: Deployment Command Dry Run
        echo "🔍 Deployment Command Debug:"
        echo "Command that would be executed:"
        echo "az deployment group create \\"
        echo "  --resource-group \"${RESOURCE_GROUP}\" \\"
        echo "  --template-file \"infrastructure/frontend.bicep\" \\"
        echo "  --parameters \"infrastructure/parameters.json\" \\"
        echo "  --parameters frontendImage=\"fortequizcontainerregistry.azurecr.io/quiz-frontend:${RUN_NUMBER}\" \\"
        echo "  --parameters backendImage=\"fortequizcontainerregistry.azurecr.io/quiz-backend:${RUN_NUMBER}\" \\"
        echo "  --parameters sqlConnectionString=\"${SQL_CONNECTION_STRING:0:20}...\" \\"
        echo "  --parameters azureOpenAIApiKey=\"${AZURE_OPENAI_API_KEY:0:20}...\" \\"
        echo "  --name \"deployment-${RUN_NUMBER}\" \\"
        echo "  --output table"
        echo ""
        
        # Step 10: Actual Deployment (if validation passed)
        echo "🚀 Attempting actual deployment..."
        az deployment group create \
          --resource-group "${RESOURCE_GROUP}" \
          --template-file "infrastructure/frontend.bicep" \
          --parameters @infrastructure/parameters.json \
          --parameters frontendImage="fortequizcontainerregistry.azurecr.io/quiz-frontend:${RUN_NUMBER}" \
          --parameters backendImage="fortequizcontainerregistry.azurecr.io/quiz-backend:${RUN_NUMBER}" \
          --parameters sqlConnectionString="${SQL_CONNECTION_STRING}" \
          --parameters azureOpenAIApiKey="${AZURE_OPENAI_API_KEY}" \
          --name "deployment-${RUN_NUMBER}" \
          --output table \
          --debug --verbose

    
    - name: Update Container Apps
      run: |
        az containerapp update \
          --name "${{ env.FRONTEND_CONTAINER_APP_NAME }}" \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --image "${{ env.CONTAINER_REGISTRY }}/quiz-frontend:${{ github.run_number }}"
        
        az containerapp update \
          --name "${{ env.BACKEND_CONTAINER_APP_NAME }}" \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --image "${{ env.CONTAINER_REGISTRY }}/quiz-backend:${{ github.run_number }}"
    
    - name: Get URLs
      id: get-urls
      run: |
        FRONTEND_URL=$(az containerapp show \
          --name "${{ env.FRONTEND_CONTAINER_APP_NAME }}" \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        echo "frontend-url=https://$FRONTEND_URL" >> $GITHUB_OUTPUT
        
        BACKEND_URL=$(az containerapp show \
          --name "${{ env.BACKEND_CONTAINER_APP_NAME }}" \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        echo "backend-url=https://$BACKEND_URL" >> $GITHUB_OUTPUT
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const frontendUrl = '${{ steps.get-urls.outputs.frontend-url }}';
          const backendUrl = '${{ steps.get-urls.outputs.backend-url }}';
          const comment = `## 🚀 Application Deployed Successfully!
          
          **Frontend URL:** ${frontendUrl}
          **Backend URL:** ${backendUrl}
          
          **Deployment Details:**
          - Frontend Image: \`${{ env.CONTAINER_REGISTRY }}/quiz-frontend:${{ github.sha }}\`
          - Backend Image: \`${{ env.CONTAINER_REGISTRY }}/quiz-backend:${{ github.sha }}\`
          - Environment: Production
          - Resource Group: ${{ env.RESOURCE_GROUP }}
          
          **Next Steps:**
          1. Test the deployed application
          2. Verify all functionality works as expected`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
